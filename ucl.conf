/*
 * -------------------------------------------------------
 *  nf-core/sarek Nextflow Oriol and Chris UCL config file
 * -------------------------------------------------------

singularity {
    enabled = true
    autoMounts = true
    runOptions = "--bind ${PWD}"
    cacheDir = "/SAN/colcc/TX100_WGS_raw/wgs/src/singularity"
}

executor {
    name = 'sge'
    queueSize = 100
    pollInterval = '30sec'
}

def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}

process {

    executor = 'sge'
    time = {check_resource(24.h * task.attempt)}
    shell = ['/bin/bash', '-euo', 'pipefail']
    max_memory = 224.GB
    max_cpus = 16
    max_time = '2000.h'

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxErrors = '-1'
    maxRetries = 3
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=24:00:00,h_vmem=4G,tmem=4G -R y'

    withLabel:process_low {
    cpus = 2
    memory = { check_resource( 14.GB * task.attempt) }
    time = { check_resource( 6.h * task.attempt) }
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=6:00:00, h_vmem=8G,tmem=8G -pe smp 2'
    }

    withLabel:process_medium {
    cpus = 6
    memory = { check_resource( 42.GB * task.attempt) }
    time = { check_resource( 8.h * task.attempt) }
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=12:00:00,h_vmem=8G,tmem=8G -pe smp 6'
    }

    withLabel:process_high {
    cpus = 8
    memory = { check_resource( 84.GB * task.attempt) }
    time = { check_resource( 10.h * task.attempt) }
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=12:00:00,h_vmem=8G,tmem=8G -pe smp 8'
    }

    withLabel:process_long {
    time = { check_resource( 20.h * task.attempt) }
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=360:00:00,h_vmem=8G,tmem=8G'
    }

    withLabel:cpus_1 {
    cpus = 1
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=360:00:00,h_vmem=8G,tmem=8G  -R y'
    }

    withLabel:cpus_2 {
    cpus = 2
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=360:00:00,h_vmem=8G,tmem=8G -pe smp 2'
    }

    withLabel:cpus_4 {
    cpus = 4
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=360:00:00,h_vmem=8G,tmem=8G -pe smp 4'
    }

    withLabel:cpus_8 {
    cpus =  8
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=360:00:00,h_vmem=8G,tmem=8G -pe smp 8'
    }

    withLabel:cpus_16 {
    cpus = 16
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=1000:00:00,h_vmem=8G,tmem=8G -pe smp 16'
    }

    withLabel:cpus_max {
    cpus = 16
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=1000:00:00,h_vmem=6G,tmem=6G -pe smp 16'
    }

    withLabel:memory_singleCPU_2_task {
    memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * 2 * task.attempt)}
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=8:00:00,h_vmem=8G,tmem=8G  -R y'
    }

    withLabel:memory_singleCPU_task_sq {
    memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * task.attempt * task.attempt)}
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=8:00:00,h_vmem=8G,tmem=8G  -R y'
    }

    withLabel:memory_max {
    memory = {params.max_memory}
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=8:00:00,h_vmem=16G,tmem=16G -pe smp 2'
    }

    withName:get_software_versions {
    cache = false
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=1:00:00,h_vmem=2G,tmem=2G'
    }

    withLabel:concat_vcf {
    memory = {check_resource(60.GB * task.attempt)}
    time = {check_resource(48.h * task.attempt)}
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=36:00:00,h_vmem=8G,tmem=8G -pe smp 2'
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}

    }

    withLabel:FastQC {
    memory = {check_resource(60.GB * task.attempt)}
    time = 2000.h
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=36:00:00,h_vmem=32G,tmem=32G'
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }

    withName:MapReads {
    memory = {check_resource(60.GB * task.attempt)}
    cpus = 16
    time = 2000.h
    penv = 'smp'
    clusterOptions = '-S /bin/bash -cwd -l h_rt=1000:00:00,h_vmem=6G,tmem=6G -pe smp 16'

    }

    withName:MultiQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }
    withName:Snpeff {
    container = {(params.annotation_cache && params.snpeff_cache) ? 'nfcore/sarek:2.7' : "nfcore/sareksnpeff:2.7.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }
    withLabel:VEP {
    container = {(params.annotation_cache && params.vep_cache) ? 'nfcore/sarek:2.7' : "nfcore/sarekvep:2.7.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }
}
